/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package system.software_engineering;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.List;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.basic.BasicListUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author addie
 */
public class listOfEvents extends javax.swing.JFrame {

    /**
     * Creates new form listOfEvents
     */
    public listOfEvents() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        eventTable = new javax.swing.JTable();
        month = new com.toedter.calendar.JMonthChooser();
        btnViewGraph = new javax.swing.JButton();
        yearChoosen = new com.toedter.calendar.JYearChooser();
        btnAddEvent1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 53, 84));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setIcon(new javax.swing.ImageIcon(System.getProperty("user.dir") + "\\src\\main\\java\\system\\images\\small_logo.png"));
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 10, 120, 140));

        jButton6.setBackground(new java.awt.Color(103, 146, 137));
        jButton6.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("back");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 460, 70, 30));

        jPanel2.setBackground(new java.awt.Color(255, 250, 202));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("List of Events");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(234, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 680, 110));

        jButton1.setBackground(new java.awt.Color(103, 146, 137));
        jButton1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("View");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 160, 90, 40));

        btnRemove.setBackground(new java.awt.Color(103, 146, 137));
        btnRemove.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnRemove.setForeground(new java.awt.Color(255, 255, 255));
        btnRemove.setText("Delete Event");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        jPanel1.add(btnRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 450, 120, 40));

        eventTable.setBackground(new java.awt.Color(255, 250, 202));
        eventTable.setForeground(new java.awt.Color(0, 0, 0));
        eventTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Event Title", "Date", "Duration"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        eventTable.setMinimumSize(new java.awt.Dimension(225, 20));
        eventTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(eventTable);
        if (eventTable.getColumnModel().getColumnCount() > 0) {
            eventTable.getColumnModel().getColumn(0).setMinWidth(500);
            eventTable.getColumnModel().getColumn(0).setMaxWidth(500);
            eventTable.getColumnModel().getColumn(1).setMinWidth(150);
            eventTable.getColumnModel().getColumn(1).setMaxWidth(150);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, 720, 230));

        month.setBackground(new java.awt.Color(103, 146, 137));
        month.setFocusable(false);
        month.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        month.setMonth(0);
        jPanel1.add(month, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, 190, 40));

        btnViewGraph.setBackground(new java.awt.Color(103, 146, 137));
        btnViewGraph.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnViewGraph.setForeground(new java.awt.Color(255, 255, 255));
        btnViewGraph.setText("View Graph");
        btnViewGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewGraphActionPerformed(evt);
            }
        });
        jPanel1.add(btnViewGraph, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 160, 120, 40));

        yearChoosen.setBackground(new java.awt.Color(103, 146, 137));
        yearChoosen.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jPanel1.add(yearChoosen, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 160, 90, 40));

        btnAddEvent1.setBackground(new java.awt.Color(103, 146, 137));
        btnAddEvent1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        btnAddEvent1.setForeground(new java.awt.Color(255, 255, 255));
        btnAddEvent1.setText("Add New Event");
        btnAddEvent1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEvent1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddEvent1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 450, 120, 40));

        jButton2.setBackground(new java.awt.Color(103, 146, 137));
        jButton2.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Export Data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 160, 120, 40));

        jButton3.setBackground(new java.awt.Color(103, 146, 137));
        jButton3.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Edit Event");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 450, 100, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 500));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    Component frame;
    
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        goodTimeMoral form = new goodTimeMoral();
        form.show();
        show(false);
    }//GEN-LAST:event_jButton6ActionPerformed

        String myMonth;
        DefaultTableModel tableModel;
        String desc = "";
        String title;
        String year;
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        
        myMonth = String.format("%02d", month.getMonth() + 1);
        year = Integer.toString(yearChoosen.getYear());

        String sql = "SELECT * FROM events WHERE SUBSTRING(event_date, 6, 2) = ? AND SUBSTRING(event_date,1,4)=?";

        try {
            PreparedStatement statement = sql_connect.db_connect().prepareStatement(sql);
            statement.setString(1, myMonth);
            statement.setString(2, year);

            ResultSet resultSet = statement.executeQuery();

            tableModel = (DefaultTableModel) eventTable.getModel();
            tableModel.setRowCount(0);

            boolean hasData = false;

            while (resultSet.next()) {
                hasData = true;

                desc = resultSet.getString("event_desc");

                Object[] rowData = {
                    resultSet.getString("event_title"),
                    resultSet.getString("event_date"),
                    resultSet.getString("event_duration")
                };

                tableModel.addRow(rowData);
            }


            if (!hasData) {
                JOptionPane.showMessageDialog(null,
                        "There is no event this month.",
                        "No Event",
                        JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null,
                    "There's an error in the database!",
                    "Database Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

        
    
    private void btnViewGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewGraphActionPerformed
        String sql = "SELECT events_attended FROM prisoners";
        String dateSql = "SELECT event_date FROM events WHERE event_title = ?";

        try {
            PreparedStatement statement = sql_connect.db_connect().prepareStatement(sql);
            ResultSet resultSet = statement.executeQuery();

            Map<String, Integer> valueCountMap = new HashMap<>();
            while (resultSet.next()) {
                String rowData = resultSet.getString("events_attended");
                if (rowData != null) {
                    String[] values = rowData.split(",");

                    // Count the occurrences of each value
                    for (String value : values) {
                        value = value.trim();
                        int count = valueCountMap.getOrDefault(value, 0);
                        valueCountMap.put(value, count + 1);
                    }
                }
            }

            // Create a dataset for the bar graph
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for (Map.Entry<String, Integer> entry : valueCountMap.entrySet()) {
                String value = entry.getKey();
                int count = entry.getValue();
                String label = value; // Use the event title as the initial label

                // Retrieve the event date for the current event title
                PreparedStatement dateStatement = sql_connect.db_connect().prepareStatement(dateSql);
                dateStatement.setString(1, value);
                ResultSet dateResultSet = dateStatement.executeQuery();
                if (dateResultSet.next()) {
                    String eventDate = dateResultSet.getString("event_date");
                    label += " (" + eventDate + ")"; // Concatenate the event date to the label
                }
                dateResultSet.close();
                dateStatement.close();

                dataset.addValue(count, "Count", label);
            }

            // Create the bar chart
            JFreeChart chart = ChartFactory.createBarChart("Event Report", "Event Name and Date", "Number of Prisoner", dataset, PlotOrientation.VERTICAL, false, true, false);

            NumberAxis rangeAxis = (NumberAxis) chart.getCategoryPlot().getRangeAxis();
            rangeAxis.setRange(0, 20); // Set the desired range

            // Display the chart in a frame
            ChartFrame frame = new ChartFrame("Event Report", chart);
            frame.setResizable(false); // Make the frame non-resizable
            frame.setPreferredSize(new Dimension(800, 500));
            frame.pack();
            frame.setVisible(true);

        } catch (SQLException e) {
            System.out.print(e);
        }

    }//GEN-LAST:event_btnViewGraphActionPerformed
  
    
    private void btnAddEvent1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEvent1ActionPerformed
       addEvent form = new addEvent();
       form.show();
       show(false);
    }//GEN-LAST:event_btnAddEvent1ActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        
    try{    
        int selectedRowIndex = eventTable.getSelectedRow();

        DefaultTableModel model = (DefaultTableModel) eventTable.getModel();
        Object[] rowData = new Object[model.getColumnCount()];
        for (int i = 0; i < model.getColumnCount(); i++) {
            rowData[i] = model.getValueAt(selectedRowIndex, i);
        }
        
        
        model.removeRow(selectedRowIndex);

        System.out.println(rowData[selectedRowIndex]);

        String deleteSql = "DELETE FROM events WHERE event_id = ?";
        String selectEventIdSql = "SELECT event_id FROM events WHERE event_title = ?";

        try {
            PreparedStatement selectStatement = sql_connect.db_connect().prepareStatement(selectEventIdSql);
            selectStatement.setString(1, (String) rowData[selectedRowIndex]); // Assuming the second column represents the event title as a String


            // Execute the select statement to retrieve the event ID
            ResultSet resultSet = selectStatement.executeQuery();
            int eventId = 0;
            if (resultSet.next()) {
                eventId = resultSet.getInt("event_id");
            }
            resultSet.close();
            selectStatement.close();

            PreparedStatement deleteStatement = sql_connect.db_connect().prepareStatement(deleteSql);
            deleteStatement.setInt(1, eventId); // Assuming the event_id column is of type INT

            // Execute the delete statement
            int rowsAffected = deleteStatement.executeUpdate();

            if (rowsAffected > 0) {
                // Row deleted successfully from the database
                JOptionPane.showMessageDialog(frame, "Event Deleted Successfully!");
            }

            deleteStatement.close();
        } catch (SQLException e) {
            // Handle any errors that may occur during the delete operation
            e.printStackTrace();
        } catch (NumberFormatException e) {
            // Handle any errors that may occur if the ID value is not a valid integer
            e.printStackTrace();
        }
            }catch(ArrayIndexOutOfBoundsException ex){

                    JOptionPane.showMessageDialog(null, "Please select event first");
                }


    }//GEN-LAST:event_btnRemoveActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            JFileChooser filechooser = new JFileChooser();
            filechooser.setDialogTitle("Save CSV File");
            filechooser.setFileFilter(new FileNameExtensionFilter("CSV Files (*.csv)", "csv"));

            String sql = "SELECT events_attended FROM prisoners";
            String dateSql = "SELECT event_date FROM events WHERE event_title = ?";

            try {
                PreparedStatement statement = sql_connect.db_connect().prepareStatement(sql);
                ResultSet resultSet = statement.executeQuery();

                Map<String, Integer> valueCountMap = new HashMap<>();
                while (resultSet.next()) {
                    String rowData = resultSet.getString("events_attended");
                    if (rowData != null) {
                        String[] values = rowData.split(",");

                        // Count the occurrences of each value
                        for (String value : values) {
                            value = value.trim();
                            int count = valueCountMap.getOrDefault(value, 0);
                            valueCountMap.put(value, count + 1);
                        }
                    }
                }

                int userSelection = filechooser.showSaveDialog(null);
                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    String filePath = filechooser.getSelectedFile().getAbsolutePath();
                    if (!filePath.toLowerCase().endsWith(".csv")) {
                        filePath += ".csv";
                    }
                    try (FileWriter writer = new FileWriter(filePath)) {
                        // Write CSV header
                        writer.append("Event Title");
                        writer.append(",");
                        writer.append("Event Date");
                        writer.append(",");
                        writer.append("Number of Prisoner who attends");
                        writer.append("\n");

                        // Write event data
                        for (Map.Entry<String, Integer> entry : valueCountMap.entrySet()) {
                            String eventTitle = entry.getKey();
                            int prisonerCount = entry.getValue();

                            // Retrieve the event date for the current event title
                            PreparedStatement dateStatement = sql_connect.db_connect().prepareStatement(dateSql);
                            dateStatement.setString(1, eventTitle);
                            ResultSet dateResultSet = dateStatement.executeQuery();
                            String eventDate = ""; // Initialize the event date
                            if (dateResultSet.next()) {
                                eventDate = dateResultSet.getString("event_date");
                            }
                            dateResultSet.close();
                            dateStatement.close();

                            writer.append(eventTitle);
                            writer.append(",");
                            writer.append(eventDate);
                            writer.append(",");
                            writer.append(String.valueOf(prisonerCount));
                            writer.append("\n");
                        }

                        writer.flush();
                        writer.close();

                        JOptionPane.showMessageDialog(null, "CSV file saved successfully", "Export Successful",
                                JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Export error, please try again.", "Export Error",
                                JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (SQLException e) {
                System.out.print(e);
            }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        
      
        try{   //get the selected row logic
            int selectedRowIndex = eventTable.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) eventTable.getModel();
            Object[] rowData = new Object[model.getColumnCount()];
            for (int i = 0; i < model.getColumnCount(); i++) {
                rowData[i] = model.getValueAt(selectedRowIndex, i);
            }
            model.removeRow(selectedRowIndex);


            variable.eventToEdit = (String) rowData[selectedRowIndex];        
            editEvent form = new editEvent();
            form.show();
            show(false);
        }catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(null, "Please select event first");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(listOfEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(listOfEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(listOfEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(listOfEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new listOfEvents().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddEvent1;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnViewGraph;
    private javax.swing.JTable eventTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JMonthChooser month;
    private com.toedter.calendar.JYearChooser yearChoosen;
    // End of variables declaration//GEN-END:variables
}
